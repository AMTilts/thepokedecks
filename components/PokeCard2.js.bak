import React, {useState, useEffect} from 'react';
import { Card, Button, Container, Row, Col } from 'react-bootstrap';
import cardImg from '../images/card_img.png';
import classNames from 'classnames';
import Image from 'next/future/image';
import FixImage from './FixImage';
import imageSize from 'image-size';
import probe from 'probe-image-size' 
// import { EntryOptionPlugin } from 'webpack';

`query MyQuery {
    allFile(filter: { sourceInstanceName:{eq: "loading"} }) {
      edges {

        node {
          extension
          dir
          modifiedTime
        }
      }
    }
  }`;


  // async function fetchProps( { params }) {
  //   const res = await fetch('https://pokemon-go-api.github.io/pokemon-go-api/api/pokedex.json')
  //   const character = await res.json()
  //   const shiny = (`${character.assets.image}`)
  //   const shinyArray = ([`${character.assets[1]}`])
  //   const typesData = await fetch(`${pogoAPI}${typesAPI}`
  //   const type = (`${character.primaryTypes.type.English[0]}`);
  //   const shinyRes = await pogoShinyData.json();
  //   const statsRes = await pogoStatsData.json()
  //   const assets = character.assets;

  //   return { props: { character, shiny, shinyArray, shinyRes, statsRes, type, assets } }
  //                       }


  export default function PokeCard({ assets, ...props }) {
    const [imgWidth, setImgWidth] = useState(0);
    const [imgHeight, setImgHeight] = useState(0);
    const [imgg, setImgg] = useState(0);
    const [data, setData] = useState(null)
                                    // const { name, id, type, img, dimensions } = character;





    useEffect(() => {
      async function goFetch() {
        const response = await fetch('https://pokemon-go-api.github.io/pokemon-go-api/api/pokedex.json');
            setData(await response.json());
            let img = `https://raw.githubusercontent.com/PokeMiners/pogo_assets/master/Images/Pokemon/Addressable%20Assets/pm${data.dexNr}.icon.png`;
            imgg(`https://raw.githubusercontent.com/PokeMiners/pogo_assets/master/Images/Pokemon/Addressable%20Assets/pm${data.dexNr}.icon.png`);
            console.log(imgg)
            setImgWidth(img.width);
            setImgHeight(img.height);
            console.log(img)
            let id = await data.dexNr;
            const iUrl = `https://raw.githubusercontent.com/PokeMiners/pogo_assets/master/Images/Pokemon/Addressable%20Assets/pm${data.dexNr}.icon.png`
            const assets = ([ `${data.assets[1]}` ]);
            const iSUrl = `https://raw.githubusercontent.com/PokeMiners/pogo_assets/master/Images/Pokemon/Addressable%20Assets/pm${data.dexNr}.s.icon.png`
            const images = data.map((id) => [
              { url: 'https://raw.githubusercontent.com/PokeMiners/pogo_assets/master/Images/Pokemon/Addressable%20Assets/pm'+`${id.dexNr}`+'.icon.png' },
              { url: 'https://raw.githubusercontent.com/PokeMiners/pogo_assets/master/Images/Pokemon/Addressable%20Assets/pm'+`${id.dexNr}`+'.s.icon.png' }
                ]);

            const imagesWithSizes = await images.map((image) => {
              const imageWithSize = image;
              imageWithSize.size = probe(image.url);
              console.log(image.url)
                                                                                                                
              return imageWithSize;
              });

            
              return {
                iUrl,
                iSUrl,
                props: {
                  // imageWithSize: {}, // You need to provide imageWithSize or remove it from the destructuring
                images: imagesWithSizes,
                assets,
                data,
                type,
                img,
                imgWidth,
                }
              }
            };

          goFetch();
      
        return () => {
          clean
      }
    }, [goFetch]);

    console.log( `${assets}` )
    
    console.log(data ? `${data.assetForms[0].image}` : 'nope')


// async function Page() {
//   const data = await getData()
 
//   return (
//      ( data?.map((img) => {
//       <div>
//           <Image
//             src={img.assetForms.image}
//             width={img ? img.width : 'width'}
//             height={img ? img.height : 'height'}
//             alt="myballs"
//           />
//       </div>
//     }
    
//      ))
//   );

  console.log(Page());

  const [imgArray, setImgArray] = useState([]);



  
  const pokemonTypes = ['grass', 'fire', 'water', 'fairy', 'rock', 'dark', 'ghost', 'ice', 'dragon', 'flying', 'steel', 'electric', 'poison', 'fighting', 'psychic', 'ground', 'bug', 'normal'];
   
  const cardFrame = pokemonTypes.map((type) => {
    return `frame-card-bg-white-${type}`;
  })

  const cardWhite = classNames({
    'frame-card-bg-white-grass': `${type}` === 'grass',
    'frame-card-bg-white-fire': `${type}` === 'fire',
    'frame-card-bg-white-fairy': `${type}` === 'fairy',
    'frame-card-bg-white-water': `${type}` === 'water',
    'frame-card-bg-white-rock': `${type}` === 'rock',
    'frame-card-bg-white-dark': `${type}` === 'dark',
    'frame-card-bg-white-ghost': `${type}` === 'ghost',
    'frame-card-bg-white-ice': `${type}` === 'ice',
    'frame-card-bg-white-dragon': `${type}` === 'dragon',
    'frame-card-bg-white-flying': `${type}` === 'flying',
    'frame-card-bg-white-steel': `${type}` === 'steel',
    'frame-card-bg-white-electric': `${type}` === 'electric',
    'frame-card-bg-white-poison': `${type}` === 'poison',
    'frame-card-bg-white-fighting': `${type}` === 'fighting',
    'frame-card-bg-white-psychic': `${type}` === 'psychic',
    'frame-card-bg-white-ground': `${type}` === 'ground',
    'frame-card-bg-white-bug': `${type}` === 'bug',
    'frame-card-bg-white-normal': `${type}` === 'normal',

  });

  const logoType = classNames({
    'type-logo-TYPENAME-grass': `${type}` === 'grass',
    'type-logo-TYPENAME-fire': `${type}` === 'fire',
    'type-logo-TYPENAME-fairy': `${type}` === 'fairy',
    'type-logo-TYPENAME-water': `${type}` === 'water',
    'type-logo-TYPENAME-rock': `${type}` === 'rock',
    'type-logo-TYPENAME-dark': `${type}` === 'dark',
    'type-logo-TYPENAME-ghost': `${type}` === 'ghost',
    'type-logo-TYPENAME-ice': `${type}` === 'ice',
    'type-logo-TYPENAME-dragon': `${type}` === 'dragon',
    'type-logo-TYPENAME-flying': `${type}` === 'flying',
    'type-logo-TYPENAME-steel': `${type}` === 'steel',
    'type-logo-TYPENAME-electric': `${type}` === 'electric',
    'type-logo-TYPENAME-poison': `${type}` === 'poison',
    'type-logo-TYPENAME-fighting': `${type}` === 'fighting',
    'type-logo-TYPENAME-psychic': `${type}` === 'psychic',
    'type-logo-TYPENAME-ground': `${type}` === 'ground',
    'type-logo-TYPENAME-bug': `${type}` === 'bug',
    'type-logo-TYPENAME-normal': `${type}` === 'normal'
  });

 const pokeName = classNames({
    'poke-name-grass': `${type}` === 'grass',
    'poke-name-fire': `${type}` === 'fire',
    'poke-name-fairy': `${type}` === 'fairy',
    'poke-name-water': `${type}` === 'water',
    'poke-name-rock': `${type}` === 'rock',
    'poke-name-dark': `${type}` === 'dark',
    'poke-name-ghost': `${type}` === 'ghost',
    'poke-name-ice': `${type}` === 'ice',
    'poke-name-dragon': `${type}` === 'dragon',
    'poke-name-flying': `${type}` === 'flying',
    'poke-name-steel': `${type}` === 'steel',
    'poke-name-electric': `${type}` === 'electric',
    'poke-name-poison': `${type}` === 'poison',
    'poke-name-fighting': `${type}` === 'fighting',
    'poke-name-psychic': `${type}` === 'psychic',
    'poke-name-ground': `${type}` === 'ground',
    'poke-name-bug': `${type}` === 'bug',
    'poke-name-normal': `${type}` === 'normal',
    'poke-name-grass': `${type}` === 'grass',
    'poke-name-fire': `${type}` === 'fire',
    'poke-name-fairy': `${type}` === 'fairy'
  });

  const typeName = classNames({
    'TYPENAME-grass': `${type}` === 'grass',
    'TYPENAME-fire': `${type}` === 'fire',
    'TYPENAME-fairy': `${type}` === 'fairy',
    'TYPENAME-water': `${type}` === 'water',
    'TYPENAME-rock': `${type}` === 'rock',
    'TYPENAME-dark': `${type}` === 'dark',
    'TYPENAME-ghost': `${type}` === 'ghost',
    'TYPENAME-ice': `${type}` === 'ice',
    'TYPENAME-dragon': `${type}` === 'dragon',
    'TYPENAME-flying': `${type}` === 'flying',
    'TYPENAME-steel': `${type}` === 'steel',
    'TYPENAME-electric': `${type}` === 'electric',
    'TYPENAME-poison': `${type}` === 'poison',
    'TYPENAME-fighting': `${type}` === 'fighting',
    'TYPENAME-psychic': `${type}` === 'psychic',
    'TYPENAME-ground': `${type}` === 'ground',
    'TYPENAME-bug': `${type}` === 'bug',
    'TYPENAME-normal': `${type}` === 'normal',
    'TYPENAME-grass': `${type}` === 'grass',
    'TYPENAME-fire': `${type}` === 'fire',
    'TYPENAME-fairy': `${type}` === 'fairy'
  });

  const cardGradient = classNames({
    'card-bg-gradient-grass': `${type}` === 'grass',
    'card-bg-gradient-fire': `${type}` === 'fire',
    'card-bg-gradient-fairy': `${type}` === 'fairy',
    'card-bg-gradient-water': `${type}` === 'water',
    'card-bg-gradient-rock': `${type}` === 'rock',
    'card-bg-gradient-dark': `${type}` === 'dark',
    'card-bg-gradient-ghost': `${type}` === 'ghost',
    'card-bg-gradient-ice': `${type}` === 'ice',
    'card-bg-gradient-dragon': `${type}` === 'dragon',
    'card-bg-gradient-flying': `${type}` === 'flying',
    'card-bg-gradient-steel': `${type}` === 'steel',
    'card-bg-gradient-electric': `${type}` === 'electric',
    'card-bg-gradient-poison': `${type}` === 'poison',
    'card-bg-gradient-fighting': `${type}` === 'fighting',
    'card-bg-gradient-psychic': `${type}` === 'psychic',
    'card-bg-gradient-ground': `${type}` === 'ground',
    'card-bg-gradient-bug': `${type}` === 'bug',
    'card-bg-gradient-normal': `${type}` === 'normal',
    'card-bg-gradient-grass': `${type}` === 'grass',
    'card-bg-gradient-fire': `${type}` === 'fire',
    'card-bg-gradient-fairy': `${type}` === 'fairy'
  })

  function loadedData() {
    if (lowerCaseData.primaryType && lowerCaseData.primaryType.names) {
      console.log(lowerCaseData.primaryType.names.English)
    } console.log('nope mannn')
  };

  const lowerCaseType = `${type}`.toLowerCase(); 
  
  loadedData;

  console.log(iUrl, iSUrl)

    return (
      <div className="Page-outer">
        <div id="Page" data-name="Artboards" className="Page">
          <div id="Frame-outer" className="Frame-outer">
            <div id="Frame" data-name="card-parent" className="Frame">
              <div className="frame-card-outline-outer">
                <div
                  id="frame-card-outline"
                  data-name="frame-card-outline"
                  className="frame-card-outline"
                >
                  <div className="Frame-card-elements-outer">
                    <div
                      id="Frame-card-elements"
                      data-name="Frame-card-elements"
                      className="Frame-card-elements"
                    >
                      <div className="frame-card-bg-white-outer">
                        <div
                          data-name="frame-card-bg-white"
                          id={cardWhite}
                          className="frame-card-bg-white">
                      </div>
                      </div>
                      <div className="frame-card-img-outer">
                        <div
                          id="frame-card-img"
                          data-name="frame-card-img"
                          className="frame-card-img"
                        >
                      <div className="card-img-outer">
                        {images.map((image, index) => (
                          <Image
                            key={index} // Use a unique identifier here
                            id={`card-img-${index}`} // Provide a unique ID or class for each image
                            src={image.url} // Use the correct URL from the image object
                            data-name="card-img"
                            alt={name}
                            className="card-img"
                            width={image.size.width}
                            height={image.size.height}
                          />
                        ))}
                      </div>
                        </div>
                      </div>
                      <div className="frame-pokemon-name-outer">
                        <div
                          id="frame-pokemon-name"
                          data-name="frame-pokemon-name"
                          className="frame-pokemon-name"
                        >
                          <div className="card-frame-name-outer">
                            <div
                              id="card-frame-name"
                              data-name="card-frame-name"
                              className="card-frame-name"
                            >
                              <div className="poke-name-outer">
                                <div
                                  id={pokeName}
                                  data-name="poke-name"
                                  className="poke-name"
                                >
                                  <div key="0">{name}</div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="logo-name-parent-frame">
                        <div className="frame-type-logo-name-outer">
                        <div className="TYPENAME-logo-outer">
                              <div
                                id="TYPENAME-logo"
                                data-name="TYPENAME-logo">
                                <div className="Frame-4-outer">
                                  <div id="Frame-4" data-name="Frame 4" className="Frame-4">
                                    <div className="type-logo-TYPENAME-outer">
                                      <Image
                                          id={`type-logo-TYPENAME-${lowerCaseType}`}
                                          src={
                                              !lowerCaseType
                                                  ? `/images/type_c21_${lowerCaseType}.svg`
                                                  : '/images/default.svg' // Replace 'default.svg' with your default image path
                                          }
                                          data-name="type-logo-TYPENAME"
                                          alt={`${type} Type`}
                                          className="type-logo-TYPENAME"
                                          height={25}
                                          width={28}
                                          layout="raw"
                                      />
                                    </div>
                                  </div>
                                </div>
                              </div>
                          <div
                            id="frame-type-logo-name"
                            data-name="frame-type-logo-name"
                            className="frame-type-logo-name"
                          >
                            <div className="frame-type-name-outer">
                              <div
                                id="frame-type-name"
                                data-name="frame-type-name"
                                className="frame-type-name"
                              >
                                <div className="TYPENAME-outer">
                                  <div
                                    id={`TYPENAME-${lowerCaseType}`}
                                    data-name="TYPENAME"
                                    className="TYPENAME"
                                  >
                                    <div key="0">
                                      {type}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                          </div>
                        </div>
                      </div>
                      {/* <div className={`type-gradient-${type}`}>

                    </div> */}
                  </div>
                  <div className="card-bg-gradient-outer">
                    <div
                      id={`card-bg-gradient-${lowerCaseType}`} 
                      data-name="card-bg-gradient"
                      alt="card-bg-gradient"
                      className="card-bg-gradient"
                      >              
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>  
    );
  }
};
